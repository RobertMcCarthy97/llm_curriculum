"\ndef is_next_to_green_key(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is next to the green key.\n\n    The assumptions made in this function are similar to those in the provided example.\n    The 'next to' condition implies that the agent is one cell away from the green key, \n    either horizontally or vertically, but not diagonally. Hence the use of Manhattan \n    distance with a value of 1.\n\n    We also assume that the environment is a grid, and locations are expressed as \n    (x, y) coordinates, where x increases as we move to the right and y increases \n    as we descend. As such, by subtracting the coordinates, we can find the distance.\n\n    Finally, we assume that the 'green_key' information is available within \n    the 'field_of_view' part of the observation provided to the agent.\n\n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is next to the green key, False otherwise.\n    \"\"\"\n    agent_pos = observation['agent_info']['position']\n    green_key_pos = observation['field_of_view']['green_key']['position']\n\n    dx = abs(agent_pos[0] - green_key_pos[0])\n    dy = abs(agent_pos[1] - green_key_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"