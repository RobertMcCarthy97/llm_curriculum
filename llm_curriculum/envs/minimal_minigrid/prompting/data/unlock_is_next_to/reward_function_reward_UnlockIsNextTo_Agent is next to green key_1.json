"\ndef is_beside_green_key(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is beside the green key in a grid environment.\n    \n    The assumption here is that 'beside' refers to the agent being one cell away from the \n    green key, either horizontally or vertically, but not diagonally. We're using the \n    Manhattan distance with a distance of 1, instead of Euclidean distance.\n    \n    We also assume the environment coordinates are grid-based, with positions labeled in (x, y) pairs. \n    An increase in 'x' value signifies movement to the right and an increase in 'y' value represents \n    movement downwards. Wit this consideration, we can calculate the distance by subtracting the coordinates.\n    \n    Note: The function assumes observation data includes information about the green key. If the green key \n    is not visible in the agent's field of view, an error will occur. Handling such cases would require \n    additional logic that falls outside the described problem statement.\n    \n    :param observation: A dictionary containing the agent's observation of the environment.\n    :return: True if the agent is beside the green key, False otherwise.\n    \"\"\"\n    agent_pos = observation['agent_info']['position']\n    green_key_pos = observation['field_of_view']['green_key']['position']\n\n    dx = abs(agent_pos[0] - green_key_pos[0])\n    dy = abs(agent_pos[1] - green_key_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"