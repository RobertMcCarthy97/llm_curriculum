"\ndef is_next_to_green_door(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is next to a green door.\n    \n    We're assuming that 'next to' means that the agent is one cell away from the door, \n    either horizontally or vertically, but not diagonally. In other words, we're using \n    the Manhattan distance with a distance of 1, and not the Euclidean distance.\n    \n    We're also assuming that the environment is a grid, and that the positions are \n    given as (x, y) pairs, where x increases to the right, and y increases downward. \n    This is why we can simply subtract the coordinates to calculate the distance.\n\n     This also requires that the 'green door' is visible to the agent in the current observation,\n     i.e., exists within the 'field_of_view' sub-object in our observation JSON.\n\n     In the case where the green_door does not exist in the 'field_of_view' because currently\n     the agent is not in the vicinity of the green door, this function returns False.\n    \n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is next to the green door within its field of view, False otherwise.\n    \"\"\"\n\n    if \"green_door\" not in observation['field_of_view']:\n        return False\n\n    agent_pos = observation['agent_info']['position']\n    green_door_pos = observation['field_of_view']['green_door']['position']\n\n    dx = abs(agent_pos[0] - green_door_pos[0])\n    dy = abs(agent_pos[1] - green_door_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"