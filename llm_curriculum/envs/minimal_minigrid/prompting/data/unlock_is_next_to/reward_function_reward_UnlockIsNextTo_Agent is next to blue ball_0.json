"\ndef is_beside_blue_ball(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is beside the blue ball.\n    \n    We're making similar assumptions to the ones in the example given above. 'Beside' means that \n    the agent is one cell away from the ball, either horizontally or vertically, but not diagonally. \n    Thus, we measure the proximity using a Manhattan distance of 1.\n    \n    The agent's and the ball's positions are described as (x, y) pairs in a grid, where x increases to the right \n    and y increases downward. As such, to determine if the agent is next to the blue ball, we simply subtract \n    their respective coordinates.\n    \n    Note that we are assuming the blue ball is in the agent's field of view. If the ball is not in its field \n    of view, this function will not function correctly, as it won't be able to locate the ball's position.\n    \n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is beside the blue ball, False otherwise.\n    \"\"\"\n    agent_pos = observation['agent_info']['position']\n    blue_ball_pos = observation['field_of_view'].get('blue_ball', {}).get('position', None)\n\n    # Check if the blue ball is not in the agent's field of view\n    if blue_ball_pos is None:\n        return False\n\n    dx = abs(agent_pos[0] - blue_ball_pos[0])\n    dy = abs(agent_pos[1] - blue_ball_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"