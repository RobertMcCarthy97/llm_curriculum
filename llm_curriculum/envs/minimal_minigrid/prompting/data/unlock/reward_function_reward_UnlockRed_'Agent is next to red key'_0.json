"\ndef is_beside_red_key(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is next to the red key.\n    \n    We're assuming that 'next to' means that the agent is one cell away from the key, \n    either horizontally or vertically, but not diagonally. In other words, we're using \n    the Manhattan distance with a distance of 1, and not the Euclidean distance.\n    \n    We're also assuming that the environment is a grid, and that the positions are \n    given as (x, y) pairs, where x increases to the right, and y increases downward. \n    That's why we can simply subtract the coordinates to calculate the distance.\n    \n    The function can handle situations where the red key is not currently visible or non-existent \n    by returning False in such cases, as being beside the red key would require it to be visible.\n\n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is beside the red key, False otherwise.\n    \"\"\"\n    agent_pos = observation['agent_info']['position']\n    \n    if 'red_key' in observation['field_of_view']:\n        red_key_pos = observation['field_of_view']['red_key']['position']\n    \n        dx = abs(agent_pos[0] - red_key_pos[0])\n        dy = abs(agent_pos[1] - red_key_pos[1])\n\n        return (dx, dy) in [(1, 0), (0, 1)]\n    \n    return False\n"