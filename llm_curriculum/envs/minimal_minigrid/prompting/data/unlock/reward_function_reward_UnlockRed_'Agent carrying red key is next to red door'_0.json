"\ndef agent_carries_redkey_next_red_door(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is carrying the red key and is next to the red door.\n    \n    We're assuming that 'next to' means that the agent is one cell away from the door, \n    either horizontally or vertically, but not diagonally. In other words, we're using \n    the Manhattan distance with a distance of 1, and not the Euclidean distance.\n    \n    We are also assuming that the environment is a grid, and that positions are given\n    as (x, y) pairs, where x increases to the right, and y increases downward.\n    \n    And finally, we are assuming that if the agent is carrying something, it will be\n    represented as the name of the object in the 'carrying' key of 'agent_info' in the observation,\n    and if not carrying anything, it will represent as 'nothing' or some similar representation.\n    \n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is carrying the red key and is beside the red door, False otherwise.\n    \"\"\"\n    agent_pos = observation['agent_info']['position']\n    red_key_carried = observation['agent_info']['carrying'] == 'red_key'\n\n    # We check if there is a red_door in the field of view of the agent\n    if 'red_door' in observation['field_of_view']:\n        red_door_pos = observation['field_of_view']['red_door']['position']\n        dx = abs(agent_pos[0] - red_door_pos[0])\n        dy = abs(agent_pos[1] - red_door_pos[1])\n        return red_key_carried and (dx, dy) in [(1, 0), (0, 1)]\n    \n    # If there is no red door in the field of view, then the condition is not satisfied\n    return False\n"