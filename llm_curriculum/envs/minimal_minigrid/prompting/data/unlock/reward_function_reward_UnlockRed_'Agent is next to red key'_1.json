"\ndef is_beside_red_key(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is beside the red key.\n    \n    We're assuming that 'beside' means that the agent is one cell away from the key, \n    either horizontally or vertically, but not diagonally. In other words, we're using \n    the Manhattan distance with a distance of 1, and not the Euclidean distance.\n    \n    We're also assuming that the environment is a grid, and that the positions are \n    given as (x, y) pairs, where x increases to the right, and y increases downward. \n    That's why we can simply subtract the coordinates to calculate the distance.\n    \n    The red_key data should be present in the field_of_view attribute of the observation \n    for this function to work properly. If the key is not in the field of view, the function \n    returns False.\n    \n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is beside the red key, False otherwise.\n    \"\"\"\n    if 'red_key' not in observation['field_of_view']:\n        return False  # red key is not in the agent's field of view\n        \n    agent_pos = observation['agent_info']['position']\n    red_key_pos = observation['field_of_view']['red_key']['position']\n\n    dx = abs(agent_pos[0] - red_key_pos[0])\n    dy = abs(agent_pos[1] - red_key_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"