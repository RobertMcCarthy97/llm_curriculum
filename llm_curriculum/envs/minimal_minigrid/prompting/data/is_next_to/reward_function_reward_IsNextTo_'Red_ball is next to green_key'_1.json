"\ndef is_red_ball_next_to_green_key(observation) -> bool:\n    \"\"\"\n    This function checks if the red ball is next to the green key.\n\n    Similar to the is_beside_red_box example, 'next to' is defined as a Manhattan distance of 1 in either\n    the x or y directions. The positions on the grid are assumed to be Cartesian (x, y) coordinates where\n    x increases to the right and y increases downwards. Hence, distances can be computed as absolute\n    differences between respective coordinates.\n\n    Moreover, we are assuming that objects can be placed diagonally to each other. That is, (dx, dy) can also be (1, 1).\n\n    The positions of the red ball and green key are assumed to be in the field_of_view in the observation.\n\n    Lastly, the function also assumes that if the red ball or the green key is currently being carried by the agent, \n    they aren't 'next to' anything within the context of this task.\n\n    :param observation: A dictionary containing the observation.\n    :return: True if the red ball is next to green key, False otherwise.\n    \"\"\"\n\n    ball = observation['field_of_view'].get('red_ball', None)\n    key = observation['field_of_view'].get('green_key', None)\n    carrying = observation['agent_info']['carrying']\n\n    if ball is None or key is None:\n        return False\n\n    if not carrying:  # If the agent is not carrying anything\n        dx = abs(ball['position'][0] - key['position'][0])\n        dy = abs(ball['position'][1] - key['position'][1])\n        \n        return (dx, dy) in [(1, 0), (0, 1), (1, 1)]\n    else:\n        return False\n"