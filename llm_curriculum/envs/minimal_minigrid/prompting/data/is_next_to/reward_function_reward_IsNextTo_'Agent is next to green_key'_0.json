"\ndef is_beside_green_key(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is next to the green key.\n    \n    We're assuming that 'next to' means that the agent is one cell away from the green key, \n    either horizontally or vertically, but not diagonally. In other words, we're using \n    the Manhattan distance with a distance of 1, and not the Euclidean distance.\n    \n    We're also assuming that the environment is a grid, and that the positions are \n    given as (x, y) pairs, where x increases to the right, and y increases downward. \n    That's why we can simply subtract the coordinates to calculate the distance.\n    \n    Note: This function will return False if there's no green_key in the field of view.\n    \n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is next to the green key, False otherwise.\n    \"\"\"\n\n    agent_pos = observation['agent_info']['position']\n\n    green_key_info = observation['field_of_view'].get('green_key')  # This returns None if there is no green key\n\n    # If there's no green key in the field of view, we can't possibly be next to it\n    if green_key_info is None:\n        return False\n\n    green_key_pos = green_key_info['position']\n\n    dx = abs(agent_pos[0] - green_key_pos[0])\n    dy = abs(agent_pos[1] - green_key_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"