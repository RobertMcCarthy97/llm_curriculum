"\ndef is_beside_green_key(observation) -> bool:\n    \"\"\"\n    This function checks if the agent is beside the green key.\n    \n    We're assuming that 'beside' means that the agent is one cell away from the key, \n    either horizontally or vertically, but not diagonally. In other words, we're using \n    the Manhattan distance with a distance of 1, and not the Euclidean distance.\n    \n    We're also assuming that the environment is a grid, and that the positions are \n    given as (x, y) pairs, where x increases to the right, and y increases downward. \n    That's why we can simply subtract the coordinates to calculate the distance.\n    \n    The key's position is being accessed from the observation's 'field_of_view', and\n    as in previous example, we assume that the key's info is available in the agent's field_of_view \n    at all phases of the task.\n\n    :param observation: A dictionary containing the observation.\n    :return: True if the agent is beside the green key, False otherwise.\n    \"\"\"\n    agent_pos = observation['agent_info']['position']\n    green_key_pos = observation['field_of_view']['green_key']['position']\n\n    dx = abs(agent_pos[0] - green_key_pos[0])\n    dy = abs(agent_pos[1] - green_key_pos[1])\n\n    return (dx, dy) in [(1, 0), (0, 1)]\n"